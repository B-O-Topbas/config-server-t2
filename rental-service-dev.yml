spring:
  application:
    name: rental-service

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/rent-a-car-microservice/protocol/openid-connect/certs
  zipkin:
    base-url: http://localhost:9411


  datasource:
    username: postgres
    password: 'serversql'
    url: jdbc:postgresql://localhost:5432/rentaldb-t2dev
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
  kafka:
    producer:
      bootstrap-servers: http://localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${random.value}
    prefer-ip-address: true
server:
  port: 9595

resilience4j:
  retry:
    instances:
      inventory-retry:
        max-attempts: 5
        wait-duration: 10s
      payment-retry:
        max-attempts: 10
        wait-duration: 15s


management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    export:
      prometheus:
        enabled: true
